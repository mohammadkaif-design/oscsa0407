#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>      // open, fcntl
#include <unistd.h>     // read, write, lseek, close
#include <sys/stat.h>   // stat
#include <dirent.h>     // opendir, readdir
#include <string.h>

int main() {
    int fd;
    char buffer[50];
    ssize_t bytesRead;
    struct stat fileStat;

    // 1. Open a file
    fd = open("demo.txt", O_CREAT | O_RDWR, 0644);
    if (fd < 0) {
        perror("open");
        exit(1);
    }
    printf("File opened successfully.\n");

    // 2. Write into file
    char text[] = "Hello! Demonstrating UNIX system calls.\n";
    write(fd, text, strlen(text));

    // 3. Use lseek to move file pointer
    lseek(fd, 0, SEEK_SET);
    bytesRead = read(fd, buffer, sizeof(buffer) - 1);
    buffer[bytesRead] = '\0';
    printf("Data read: %s", buffer);

    // 4. Use fcntl to duplicate file descriptor
    int newfd = fcntl(fd, F_DUPFD, 0);
    if (newfd < 0) {
        perror("fcntl");
    } else {
        printf("File descriptor duplicated: %d -> %d\n", fd, newfd);
    }

    // 5. Use stat to get file info
    if (stat("demo.txt", &fileStat) < 0) {
        perror("stat");
    } else {
        printf("File Size: %ld bytes\n", fileStat.st_size);
        printf("Number of Links: %ld\n", fileStat.st_nlink);
        printf("File Permissions: %o\n", fileStat.st_mode & 0777);
    }

    // 6. Use opendir and readdir to list current directory
    DIR *dir;
    struct dirent *entry;
    dir = opendir(".");
    if (dir == NULL) {
        perror("opendir");
        exit(1);
    }
    printf("\nFiles in current directory:\n");
    while ((entry = readdir(dir)) != NULL) {
        printf("  %s\n", entry->d_name);
    }
    closedir(dir);

    // 7. Close files
    close(fd);
    close(newfd);

    return 0;
}
